#! /bin/sh
#
### BEGIN INIT INFO
# Provides:          secureserver-agent
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts the secureserver agent.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="secureserver agent"
NAME=secureserver-agent
DAEMON=/usr/bin/secureserver-agent
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER=secureserver
GROUP=secureserver

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

config_file="/etc/secureserver/agent.config"

print_message()
{
    cat <<EOF

#####################################################################

    Before starting a secureserver-agent you need a valid api key
    in the configuration file:

        /etc/secureserver/agent.config

    You can set key by running the following command:

    secureserver-config --set api_key=REPLACE_WITH_YOUR_API_KEY

#####################################################################

EOF
}

do_start()
{
    # Check if api key is added
    if [ $(grep -c "REPLACE_WITH_YOUR_API_KEY" "$config_file") -eq 1 ]
    then
        print_message
        exit 1
    fi

    start-stop-daemon --background --start --quiet --make-pidfile --pidfile $PIDFILE \
                      --exec $DAEMON -c $USER:$GROUP --test > /dev/null || return 1
    start-stop-daemon --background --start --quiet --make-pidfile --pidfile $PIDFILE \
                      --exec $DAEMON -c $USER:$GROUP || return 2
}

do_stop()
{
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    rm -f $PIDFILE
    return "$RETVAL"
}

do_reload()
{
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac
